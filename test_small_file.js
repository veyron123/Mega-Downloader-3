const fs = require('fs');
const FormData = require('form-data');
const axios = require('axios');

async function testSmallFileTranscription() {
    try {
        console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –º–∞–ª–æ–≥–æ —Ñ–∞–π–ª–∞...');
        
        const fileName = 'test_audio.mp3';
        
        if (!fs.existsSync(fileName)) {
            console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', fileName);
            return;
        }
        
        console.log('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä:', fs.statSync(fileName).size, '–±–∞–π—Ç');
        
        const form = new FormData();
        form.append('file', fs.createReadStream(fileName));
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
        
        const response = await axios.post('http://localhost:3000/transcribe-file', form, {
            headers: {
                ...form.getHeaders(),
            },
            timeout: 60000, // 1 –º–∏–Ω—É—Ç–∞
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!');
        console.log('üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:', response.data.transcription);
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
        if (error.response) {
            console.error('‚ùå –°—Ç–∞—Ç—É—Å:', error.response.status);
            console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
        }
    }
}

testSmallFileTranscription();